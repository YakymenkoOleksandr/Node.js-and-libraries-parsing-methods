/*Цей файл містить код обгртку try catch для всіх асинхронних контролерів.*/

/*Доречі це є замикання. Замикання (closure) — це функція, яка "запам’ятовує" змінні з області видимості,
в якій вона була створена, навіть після того, як ця область видимості завершила свою роботу. 
Тут: controller — це змінна з зовнішньої області видимості. Анонімна функція (req, res, next) => {} має до неї доступ.
Це і є замикання: внутрішня функція «пам’ятає» controller.*/

// МИ створюємо функцію обгортку, в яку передаються данні з контролеру, а сама функція передається в роут.
export const ctrlWrapper = (controller) => { // В аргументи функції обгортки передаємо контролер, який потрібно виконати
  return async (req, res, next) => {        //  це нова функція, яка: приймає звичайні req/res/next як Express-обробник, викликає твій асинхронний контролер, ловить помилки і передає їх у next(err).
    try {                                   // Для запобігання критичних помилок при асинхронних діях використовують try/catch конструкцію.
      await controller(req, res, next);     // Виконує логіку з контролера
    } catch (err) {                         // Обробляє випадок помилки 
      next(err);                            // Передає у випадку помилки на обробку в ерор мідлвару
    }
  };
};
