/*Якщо в index.js файлі ми вказували роути та мідлвари на пряму то в файлі серверу ми створюємо функцію,
яка містить необхідні роути та мідлвари. */

// 1. Встановлюємо необхідні імпорти
import express from 'express'; // Бібліотека доя I/O операцій та маршрутизації
import pino from 'pino-http'; // Бібліотека для логування запитів
import cors from 'cors'; // Бібліотека для встановлення політики CROS
import { getEnvVar } from '../src/utils/getEnvVar.js'; // Функція перетворювач призованих змінних
import { errorHendler } from './middlewares/errorHandler.js';
import { notFoundHendler } from './middlewares/notFoundHandler.js';
import router from './routers/index.js'; // Батьківський роут файл для students і auth роут файлів
import cookieParser from 'cookie-parser'; // Бібліотека для роботи з кукі


// 2. Задамо порт на якому будемо працювати.
const PORT = Number(getEnvVar('PORT', '3000'));
/* Вказуємо на якому порту має працювати наш сервер. Якщо змінна зберігається в засекреченому файлі
то необхідно використовувати process.env.НазваЗмінної для отримання доступу до неї. */

//3. Створюємо функцію серверу.
export const startServer = () => {
  //4. Передаємо у функцію expres
  const app = express(); // Записуємо функцію експрес в змінну
  //5. Передаємо мідлвару парсер JSON
  app.use(express.json()); // Це вбудована мідлвара Express, яка: Автоматично парсить JSON-тіло (body) HTTP-запитів і робить його доступним у req.body.
  //6. Встановлюємо правила CROSS
  app.use(cors()); // Це мідлвара для встановлення політики CROS

  //14. Додаємо кукі парсер.
  app.use(cookieParser());
  //7. Додаємо логер та форматувач.
  app.use(
    pino({
      transport: {
        target: 'pino-pretty',
      },
    }),
    );
    
  /*Це мідлвара для логування та форматування логів
Мідлвара з бібліотеки pino-http, для читабельного форматування відповідей в консолі.
pino генерує JSON-логи.  transport — спосіб перенаправити потік логів у сторонній "вивід".
target — назва модуля, який обробляє вивід логів. pino-pretty перетворює їх у зручний формат.*/
    
  //8. Додаємо наші роути
  app.get('/', (req, res) => {
    res.json({
      message: 'Халоу хоумі', // Це роут. В нього передається маршрут та колбек в якому аргументи обєкти req та res
    });
  });

  /*13. Додаємо studentsRouter — це просто ім'я для router, який експортується з students.js. Ім’я змінної при імпорті — довільне.
  router створено через Router() і містить всі маршрути для студентів. app.use(studentsRouter) підключає ці маршрути до Express-додатку.
  Пізніше при розробці авторизації назва змінена на router, оскільки тепер є декілька видів маршрутів для students та auth, а батьківським 
  файлом для них є index.js.
  */
  app.use(router);

  //9. Додаємо перехоплювач помилок зі сторони клієнта
  //9.1 В Node.js передача "*" більше не працює, тепер передаютьсятульки req, res i next.
  //9.2 Дана мідлвара вказує про некоректність запиту
  //9.3 Колбеки можна винести для спрощення та інкапсуляції коду в окремі файли.
  app.use(notFoundHendler);

  //10. Додаємо перехоплювач помилок зі сторони сервера
  //10.1 Мідлвара ерор перехоплювач. Мість аргументи в колбекі req, res, next, error що характерно тількия для ерормідлвар.
  //10.2 Колбеки можна винести для спрощення та інкапсуляції коду в окремі файли.
  app.use(errorHendler);
  
    

  //11. Додаємо мідлвару для штампу часу
  app.use((req, res, next) => {
    console.log(`Time: ${new Date().toLocaleString()}`);
    next();
  });
  /* Це мідлвара. В неї передається колбек з обєктами аргументами req та res та обовязковим next. 
    Виводить локальний час коли була вчинена та чи інша дія.*/

  //12. Додамо слухач, щоб занти що сервер запущено
  app.listen(PORT, () => { // Вішаємо слухач, який приймає порт та колбек, та виводимо повідомлення.
    console.log(`Сіте із воркінг он порт ${PORT}`);
  });
};
